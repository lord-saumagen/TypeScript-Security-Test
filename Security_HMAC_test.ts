/// <reference path="_references.ts" />

namespace TS_Security_test
{
  let HMAC_SHA1_TestVector64: DATA.TestVector;
  let HMAC_SHA1_TestVector20: DATA.TestVector;
  let HMAC_SHA1_TestVector100: DATA.TestVector;
  let HMAC_SHA1_TestVector49: DATA.TestVector;

  let HMAC_MD5_TestVector1: DATA.TestVector;
  let HMAC_MD5_TestVector2: DATA.TestVector;
  let HMAC_MD5_TestVector3: DATA.TestVector;
  let HMAC_MD5_TestVector4: DATA.TestVector;
  let HMAC_MD5_TestVector5: DATA.TestVector;
  let HMAC_MD5_TestVector6: DATA.TestVector;
  let HMAC_MD5_TestVector7: DATA.TestVector;

  QUnit.module("TS.Security.HMAC",
    {
      //
      // Test vectors as described in FIPS PUB 198a, http://csrc.nist.gov/publications/fips/fips198/fips-198a.pdf
      // IETF publication RFC 2202, https://tools.ietf.org/html/rfc2202
      // 

      before: function ()
      {
        HMAC_SHA1_TestVector64 =
          {
            plainText: "Sample #1",
            key: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f],
            cipherText: [0x4f, 0x4c, 0xa3, 0xd5, 0xd6, 0x8b, 0xa7, 0xcc, 0x0a, 0x12, 0x08, 0xc9, 0xc6, 0x1e, 0x9c, 0x5d, 0xa0, 0x40, 0x3c, 0x0a]
          };

        HMAC_SHA1_TestVector20 =
          {
            plainText: "Sample #2",
            key: [0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43],
            cipherText: [0x09, 0x22, 0xd3, 0x40, 0x5f, 0xaa, 0x3d, 0x19, 0x4f, 0x82, 0xa4, 0x58, 0x30, 0x73, 0x7d, 0x5c, 0xc6, 0xc7, 0x5d, 0x24]
          };

        HMAC_SHA1_TestVector100 =
          {
            plainText: "Sample #3",
            key: [0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3],
            cipherText: [0xbc, 0xf4, 0x1e, 0xab, 0x8b, 0xb2, 0xd8, 0x02, 0xf3, 0xd0, 0x5c, 0xaf, 0x7c, 0xb0, 0x92, 0xec, 0xf8, 0xd1, 0xa3, 0xaa]
          };

        HMAC_SHA1_TestVector49 =
          {
            plainText: "Sample #4",
            key: [0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0],
            cipherText: [0x9e, 0xa8, 0x86, 0xef, 0xe2, 0x68, 0xdb, 0xec, 0xce, 0x42, 0x0c, 0x75, 0x24, 0xdf, 0x32, 0xe0, 0x75, 0x1a, 0x2a, 0x26]
          };


        HMAC_MD5_TestVector1 =
          {
            plainText: "Hi There",
            key: [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b],
            cipherText: "9294727a3638bb1c13f48ef8158bfc9d"
          };

        HMAC_MD5_TestVector2 =
          {
            plainText: "what do ya want for nothing?",
            key: TS.Encoding.UTF.UTF16StringToUTF8Array("Jefe"),
            cipherText: "750c783e6ab0b503eaa86e310a5db738"
          };

        HMAC_MD5_TestVector3 =
          {
            plainText: [0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
              0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
              0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
              0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
              0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd],
            key: [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa],
            cipherText: "56be34521d144c88dbb8c733f0e8b3f6"
          };

        HMAC_MD5_TestVector4 =
          {
            plainText: [0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
              0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
              0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
              0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
              0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd],
            key: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
              0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14,
              0x15, 0x16, 0x17, 0x18, 0x19],
            cipherText: "697eaf0aca3a3aea3a75164746ffaa79"
          };

        HMAC_MD5_TestVector5 =
          {
            plainText: "Test With Truncation",
            key: [0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c],
            cipherText: "56461ef2342edc00f9bab995690efd4c"
          };

        HMAC_MD5_TestVector6 =
          {
            plainText: "Test Using Larger Than Block-Size Key - Hash Key First",
            key: [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa],
            cipherText: "6b1ab7fe4bd7bf8f0b62e6ce61b9d0cd"
          };

        HMAC_MD5_TestVector7 =
          {
            plainText: "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data",
            key: [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
              0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa],
            cipherText: "6f630fad67cda0ee1fb1f562db3aa53e"
          };
      },
      beforeEach: function ()
      {
        // prepare something for all following tests
      },
      afterEach: function ()
      {
        // clean up after each test
      },
      after: function ()
      {
        // runs once after all unit tests finished (including teardown)
      }
    });

  QUnit.test("HMAC_SHA1 encrypt", (assert) =>
  {
    let result: string;
    result = TS.Security.HMAC_SHA1(HMAC_SHA1_TestVector64.key, (HMAC_SHA1_TestVector64.plainText as string));
    assert.deepEqual(TS.Utils.HexStringToUByteArray(result), HMAC_SHA1_TestVector64.cipherText, "The cipher text should match with the test vector.");

    result = TS.Security.HMAC_SHA1(HMAC_SHA1_TestVector20.key, (HMAC_SHA1_TestVector20.plainText as string));
    assert.deepEqual(TS.Utils.HexStringToUByteArray(result), HMAC_SHA1_TestVector20.cipherText, "The cipher text should match with the test vector.");

    result = TS.Security.HMAC_SHA1(HMAC_SHA1_TestVector100.key, (HMAC_SHA1_TestVector100.plainText as string));
    assert.deepEqual(TS.Utils.HexStringToUByteArray(result), HMAC_SHA1_TestVector100.cipherText, "The cipher text should match with the test vector.");

    result = TS.Security.HMAC_SHA1(HMAC_SHA1_TestVector49.key, (HMAC_SHA1_TestVector49.plainText as string));
    assert.deepEqual(TS.Utils.HexStringToUByteArray(result), HMAC_SHA1_TestVector49.cipherText, "The cipher text should match with the test vector.");
  });

  QUnit.test("HMAC_MD5 encrypt", (assert) =>
  {
    let result: string;

    debugger;
    result = TS.Security.HMAC_MD5(HMAC_MD5_TestVector1.key, (HMAC_MD5_TestVector1.plainText as string));
    assert.equal(result, (HMAC_MD5_TestVector1.cipherText as string), "The cipher text should match with the test vector.");

    result = TS.Security.HMAC_MD5(HMAC_MD5_TestVector2.key, (HMAC_MD5_TestVector2.plainText as string));
    assert.equal(result, (HMAC_MD5_TestVector2.cipherText as string), "The cipher text should match with the test vector.");

    result = TS.Security.HMAC_MD5(HMAC_MD5_TestVector3.key, (HMAC_MD5_TestVector3.plainText as string));
    assert.equal(result, (HMAC_MD5_TestVector3.cipherText as string), "The cipher text should match with the test vector.");

    result = TS.Security.HMAC_MD5(HMAC_MD5_TestVector4.key, (HMAC_MD5_TestVector4.plainText as string));
    assert.equal(result, (HMAC_MD5_TestVector4.cipherText as string), "The cipher text should match with the test vector.");

    result = TS.Security.HMAC_MD5(HMAC_MD5_TestVector5.key, (HMAC_MD5_TestVector5.plainText as string));
    assert.equal(result, (HMAC_MD5_TestVector5.cipherText as string), "The cipher text should match with the test vector.");

    result = TS.Security.HMAC_MD5(HMAC_MD5_TestVector6.key, (HMAC_MD5_TestVector6.plainText as string));
    assert.equal(result, (HMAC_MD5_TestVector6.cipherText as string), "The cipher text should match with the test vector.");

    result = TS.Security.HMAC_MD5(HMAC_MD5_TestVector7.key, (HMAC_MD5_TestVector7.plainText as string));
    assert.equal(result, (HMAC_MD5_TestVector7.cipherText as string), "The cipher text should match with the test vector.");

  });
}
